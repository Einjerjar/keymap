plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        //mixin {
        //    add("main", "keymap-common-refmap.json")
        //}
        //mixinConfig 'keymap.mixins.json'
        mixinConfig 'keymap-common.mixins.json'
        convertAccessWideners = true
        // extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        // accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

def publishDebug = ext.get("publishDebug")

modrinth {
    project.logger.lifecycle(project.name)
    if (!env.isPresent("MODRINTH_API")) {
        throw new GradleException("Modrinth token not set!")
    }
    token = env.MODRINTH_API.value
    projectId = "keymap"
    versionNumber = version
    versionType = rootProject.mod_version_type
    uploadFile = jar
    debugMode = publishDebug
    gameVersions = ["1.18.2"]
    loaders = ["forge"]
}

curseforge {
    if (!env.isPresent("CURSE_API"))
        throw new GradleException("Curseforge token not set!")
    if (!env.isPresent("CURSE_ID"))
        throw new GradleException("Project id not set!")

    apiKey = env.CURSE_API.value
    project {
        id = env.CURSE_ID.value
        releaseType = rootProject.mod_version_type
        changelog = rootProject.file("changelog.md").text

        addGameVersion rootProject.minecraft_version
        addGameVersion "Java 17"
        addGameVersion "Forge"

        mainArtifact(remapJar.archiveFile)

        afterEvaluate {
            uploadTask.dependsOn remapJar
        }

        addArtifact shadowJar
        addArtifact remapSourcesJar
    }
    options {
        debug = publishDebug
        forgeGradleIntegration = false
    }
}