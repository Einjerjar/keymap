plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modImplementation "com.terraformersmc:modmenu:${project.version_mod_menu}"

// For the sake of god, please just add performance mods to run/mods/ if you really need them.
//    modRuntimeOnly "maven.modrinth:lithium:${project.version_lithium}"
//    modRuntimeOnly "maven.modrinth:starlight:${project.version_starlight}"
//    modRuntimeOnly "maven.modrinth:ferrite-core:${project.version_ferrite_core}"
//    modRuntimeOnly "maven.modrinth:lazydfu:${project.version_lazydfu}"
//    modRuntimeOnly "maven.modrinth:ksyxis:${project.version_ksyxis}"
////    modRuntimeOnly "maven.modrinth:c2me-fabric:${project.version_c2me}"
//    modRuntimeOnly "maven.modrinth:notenoughcrashes:${project.version_nec}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

def publishDebug = ext.get("publishDebug")

modrinth {
    if (!env.isPresent("MODRINTH_API"))
        throw new GradleException("Modrinth token not set!")
    if (!env.isPresent("MODRINTH_ID"))
        throw new GradleException("Project id not set!")

    token = env.MODRINTH_API.value
    projectId = env.MODRINTH_ID.value
    versionNumber = version
    versionType = rootProject.mod_version_type
    uploadFile = jar
    debugMode = publishDebug
    gameVersions = [rootProject.minecraft_version]
    loaders = ["fabric", "quilt"]
    additionalFiles = [shadowJar, remapSourcesJar]
    changelog = rootProject.file("changelog.md").text
    dependencies {
        required.project("fabric-api")
        optional.project("modmenu")
    }
}

curseforge {
    if (!env.isPresent("CURSE_API"))
        throw new GradleException("Curseforge token not set!")
    if (!env.isPresent("CURSE_ID"))
        throw new GradleException("Project id not set!")

    apiKey = env.CURSE_API.value
    project {
        id = env.CURSE_ID.value
        releaseType = rootProject.mod_version_type
        changelog = rootProject.file("changelog.md").text

        addGameVersion rootProject.minecraft_version
        addGameVersion "Java 17"
        addGameVersion "Fabric"
        addGameVersion "Quilt"

        relations {
            requiredDependency("fabric-api")
            optionalDependency("modmenu")
        }

        mainArtifact(remapJar.archiveFile)

        afterEvaluate {
            uploadTask.dependsOn remapJar
        }

        addArtifact shadowJar
        addArtifact remapSourcesJar
    }
    options {
        debug = publishDebug
        forgeGradleIntegration = false
    }
}